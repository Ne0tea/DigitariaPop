#PBS -N asm_polish
#PBS -l nodes=1:ppn=20,walltime=30:00:00:00
#PBS -q pang
#PBS -j oe
#PBS -o log_nextpolish2
echo "Starting"
date
hostname

cd $PBS_O_WORKDIR
##arguments
winnowmap='/public/home/huangyj/anaconda3/envs/r_p/bin/winnowmap'
asm='/public4/home/huangyj/Digitaria/assembly/03polish/Dsan_chr.fa'
hifi='/public4/home/huangyj/Digitaria/Dsan_ref_data/HiFi/Dsan_hifi.fq.gz'
sr1='/public4/home/huangyj/Digitaria/Dsan_ref_data/Ngseq/Dsan_ref_1.clean.fq.gz'
sr2='/public4/home/huangyj/Digitaria/Dsan_ref_data/Ngseq/Dsan_ref_2.clean.fq.gz'
threads=20
##job area
source activate /public/home/huangyj/anaconda3/envs/nextpolish2

if [ ! -s repetitive_k15.txt ] ; then
meryl count k=15 output merylDB $asm
meryl print greater-than distinct=0.9998 merylDB > repetitive_k15.txt
fi

if [ ! -s np2.hifi.sort.bam ] ; then
#$winnowmap -t $threads -W repetitive_k15.txt -ax map-pb $asm $hifi > tmp.map.sam
sambamba-1.0.1 view -S -f bam -h -o tmp.map.bam tmp.map.sam
# sorting
sambamba-1.0.1 sort -t $threads -o np2.hifi.sort.bam tmp.map.bam
# indexing
sambamba-1.0.1 index np2.hifi.sort.bam
fi

# produce a 21-mer dataset, remove -b 37 if you want to count singletons
if [ ! -s k21.yak ] ; then 
yak count -o k21.yak -k 21 -b 37 <(zcat $sr1 $sr2) <(zcat $sr1 $sr2)
fi
if [ ! -s k31.yak ] ; then
yak count -o k31.yak -k 31 -b 37 <(zcat $sr1 $sr2) <(zcat $sr1 $sr2) 
fi

nextPolish2 np2.hifi.sort.bam $asm k21.yak k31.yak > Dsan_chr.np2.fa

# or try with -r
# ./target/release/nextPolish2 -r -t 5 hifi.map.sort.bam asm.fa.gz k21.yak k31.yak > asm.np2.fa

conda deactivate
echo "Finished"
date
