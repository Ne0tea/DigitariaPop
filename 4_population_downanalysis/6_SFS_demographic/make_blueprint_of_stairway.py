'''
Descripttion: 
Author: Ne0tea
version: 
Date: 2024-09-04 16:45:47
LastEditors: Ne0tea
LastEditTime: 2024-09-04 22:45:36
'''
import argparse
def parse_command_line():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""\n
    """)

    parser.add_argument("-p", dest="pop", required=True,
        help="Pop file of target group.")

    parser.add_argument("-s", dest="sfs", required=True,
        help="SFS file generated by estSFS(unfolded) or easySFS(folded).")

    parser.add_argument("-o", dest="output", default='output',
        help="Directory to write output blueprint file of Stairway plot.")

    parser.add_argument("-m", dest="mode", default='estsfs',
        help="Give the mode of SFS file, estsfs(Default) or easysfs.")
    return parser.parse_args()
    
def generate_blueprint_from_estSFS(pre,nseq,sfs_file,output):
    with open(sfs_file, 'r') as sfsfile:
        sfs_line=sfsfile.readline().strip()
        sfs_contents=sfs_line.replace(',',' ')
    pop_line=f'popid: {pre}\n\
nseq: {str(nseq)}\n\
L: 10000000\n\
whether_folded: false \n\
SFS: {sfs_contents} \n\
pct_training: 0.67 # percentage of sites for training \n\
nrand: {int((nseq-2)/4)} {int((nseq-2)/2)} {int((nseq-2)*3/4)} {int(nseq-2)} # number of random break points for each try (separated by white space) \n\
project_dir: {pre} # project directory \n\
stairway_plot_dir: /public/home/huangyj/software/stairway_plot_v2.1.1/stairway_plot_es # directory to the stairway plot files \n\
ninput: 200 # number of input files to be created for each estimation \n\
#random_seed: 6 \n\
#output setting \n\
mu: 6.5e-9 # assumed mutation rate per site per generation \n\
year_per_generation: 1 # assumed generation time (in years) \n\
#plot setting \n\
plot_title: {pre} # title of the plot \n\
xrange: 0.1,100000 # Time (1k year) range; format: xmin,xmax; "0,0" for default \n\
yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; "0,0" for default \n\
xspacing: 2 # X axis spacing \n\
yspacing: 2 # Y axis spacing \n\
fontsize: 12 # Font size'
    out=open(output,'w')
    out.write(pop_line)
    out.close()

def generate_blueprint_from_easySFS(pre,sfs_file,output):
    with open(sfs_file, 'r') as sfsfile:
        sfsfile_contents=sfsfile.readlines()
        nseq=int(sfsfile_contents[0].strip().split(' ')[0])*2
        sfs_contents=sfsfile_contents[1].strip()
    pop_line=f'popid: {pre}\n\
nseq: {str(nseq)}\n\
L: 10000000\n\
whether_folded: True \n\
SFS: {sfs_contents} \n\
pct_training: 0.67 # percentage of sites for training \n\
nrand: {int((nseq-2)/4)} {int((nseq-2)/2)} {int((nseq-2)*3/4)} {int(nseq-2)} # number of random break points for each try (separated by white space) \n\
project_dir: {pre} # project directory \n\
stairway_plot_dir: /public/home/huangyj/software/stairway_plot_v2.1.1/stairway_plot_es # directory to the stairway plot files \n\
ninput: 200 # number of input files to be created for each estimation \n\
#random_seed: 6 \n\
#output setting \n\
mu: 6.5e-9 # assumed mutation rate per site per generation \n\
year_per_generation: 1 # assumed generation time (in years) \n\
#plot setting \n\
plot_title: {pre} # title of the plot \n\
xrange: 0.1,100000 # Time (1k year) range; format: xmin,xmax; "0,0" for default \n\
yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; "0,0" for default \n\
xspacing: 2 # X axis spacing \n\
yspacing: 2 # Y axis spacing \n\
fontsize: 12 # Font size'
    out=open(output,'w')
    out.write(pop_line)
    out.close()
    # pop_line=f'popid: {pre}\n\
    pass

def main(pop_file,sfs_file,output,mode):
    pre=pop_file.split('.')[0]
    with open(pop_file, 'r') as file:
        nseq=0
        for i in file:
            if i.endswith('Out'): continue
            nseq+=1
        nseq= nseq * 2
    if mode == 'estsfs':
        generate_blueprint_from_estSFS(pre,nseq,sfs_file,output)
    elif mode == 'easysfs':
        generate_blueprint_from_easySFS(pre,sfs_file,output)
    else:
        print('Mode Error! Provide file generated from estSFS or easySFS!')

if __name__ == "__main__":
    args = parse_command_line()
    main(args.pop,args.sfs,args.output,args.mode)
